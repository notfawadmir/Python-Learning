Python Error and Exception
Errors represent conditions such as 
compilation error, syntax error, 
error in the logical part of the 
code, library incompatibility, 
infinite recursion, etc.

Errors are usually beyond the control 
of the programmer and 
we should not try to handle errors.
__________________________________________________________________ 
Exceptions can be caught and 
handled by the program.

An exception is an unexpected event 
that occurs during program execution

Python Logical Errors (Exceptions)
Errors that occur at runtime 
(after passing the syntax test) are 
called exceptions or logical errors.

For instance, they occur when we

-->try to open a file(for reading) that 
   does not exist (FileNotFoundError)
-->try to divide a number by zero 
   (ZeroDivisionError)
-->try to import a module that does not 
   exist (ImportError) and so on.
____________________________________________________________________
The try...except block is used 
to handle exceptions in Python. 
___________________________________________________________________
Here's the syntax of try...except block:

try:
    # code that may cause exception
except:
    # code to run when exception occurs
Here, we have placed the code that 
might generate an exception inside 
the try block. Every try block is 
followed by an except block.
When an exception occurs, it 
is caught by the except block. 
The except block cannot be used 
without the try block.
_____________________________________________________________________
Example: 
Exception Handling Using try...except
try:
    numerator = 10
    denominator = 0
    result = numerator/denominator
    print(result)
except:
    print("Error: Denominator cannot be 0.") 
_____________________________________________________________________
Catching Specific Exceptions in Python:
For each try block, there can be one 
or more except blocks. 
Multiple except blocks allow us to handle 
each exception differently.
The argument type of each except block 
indicates the type of 
exception that can be handled by it.

Example: 
try:
    even_numbers = [2,4,6,8]
    print(even_numbers[5])
except ZeroDivisionError:
    print("Denominator cannot be 0.")
except IndexError:
    print("Index Out of Bound.")
-----------------------------------------
When the IndexError exception occurs 
in the try block,

The ZeroDivisionError exception is skipped.
The set of code inside the IndexError 
exception is executed.
_____________________________________________________________________
Python try with else clause:
In some situations, we might want 
to run a certain block of code if the 
code block inside try runs without 
any errors. For these cases, you can 
use the optional else keyword with 
the try statement.

Example:
# program to print the reciprocal of 
even numbers

try:
    num = int(input("Enter a number: "))
    assert num % 2 == 0
except:
    print("Not an even number!")
else:
    reciprocal = 1/num
    print(reciprocal)

The assert statement is used
to ensure that the input number is even 
before proceeding with the 
calculation of its reciprocal.
___________________________________________________________________
Python try...finally:::
In Python, the finally block is always 
executed no matter whether there is an 
exception or not. The finally block is 
optional. And, for each try block, there 
can be only one finally block. 

Example:
try:
    numerator = 10
    denominator = 0
    result = numerator/denominator
    print(result)
except:
    print("Error: Denominator cannot be 0.")    
finally:
    print("This is finally block.")
____________________________________________________________________
Reference Link:
https://www.programiz.com/python-programming/user-defined-exception
____________________________________________________________________