# -*- coding: utf-8 -*-
"""Python Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10RJyoFS_NmhKORToKXYyJQRm_hPTT-q3

# **Python learning**

## **Session No. 1**
"""

print("Hello World")

print(1,2,3,4,5)

print(True)

print([1,2,3,4,5,"hello","fawad"])

a=1
b=True
c="hello world"
d=(1,2,3,4,5,"hello")
e={1,2,3,4,5,"hello"}
f=[1,2,3,5,"Fawad",False]
g=complex(1,2)
h=1.56
i=None

print(a,type(a))
print(b,type(b))
print(c,type(c))
print(d,type(d))
print(e,type(e))
print(f,type(f))
print(g,type(g))
print(h,type(h))
print(i,type(i))

"""### **TASK NO. 1**

### **Calculator**
"""

a=int(input("Enter First Number : "))
b=int(input("Enter Second Number : "))


print("\nAddition",a+b)
print("Subtraction",a-b)
print("Multiplication",a*b)
print("Division",a/b)
power=input("\nPower Of Number is : ")
print("Exponent",a**b)

"""## **Session NO. 2**

### Type Casting
"""

a="4"
b="5"
print(a+b)

# print(int(a)+int(b))
c=int(a)+int(b)
print(c)

sum=float(a)+int(b)
print("Sum of A and B is :",sum)

a=4.5
b=7
sum=a+b
print("Sum : ",sum, type(sum))

"""### Taking Input"""

A = input("Name : ")

name="Zain"
friend="Faiz"
other_friend="guddu"
print("Hello "+ name)
# print("Hello ", name)

# coding="I Love Coding ," DO you as well"
# print(coding)    this code will give error

coding = "He said , \" Do You Love Coding ? \""
print(coding)

name="zain zainu"
print(name[0])
print(name[1])
print(name[2])
print(name[3])
print(name[4])
print(name[5])
print(name[6])
print(name[7])
print(name[8])
print(name[9])

name= " Fawad "
for characters in name:
  print(characters)

name = "Aslam Ejaz Rana"
length_of_text=len(name)
print(length_of_text)

"""### **String Slicing**

**Positive Slicing**
"""

name="Ahmed Ali Raza"
print(name[0:4])  #Will print the first four letter

name="Ahmed Ali Raza"
print(name[:4])  #auto zero will be assigned by the python itself

name="Ahmed Ali Raza"
print(name[2:5]) #it will start from m and end with d.

name="Ahmed Ali Raza"
print(name[:])  #It will auto print the whole name.

"""**Negative Slicing**"""

name = "Mango Tango"
print(name[:-4])

name = "Mango Tango"
print(name[:len(name)-4])

name = "Muhammad"
print(name[-6:-1])

"""### **TASK NO. 2**"""

#Count the number of characters (including spaces) in the sentence.
text="Why Are You Running"
print(len(text))

# Count the number of words in the sentence.
text="Why Are You Running"
print(len(text.split()))

# Convert the sentence to uppercase.
text="Why Are You Running"
print(text.upper())

# Convert the sentence to lowercase.
text="Why Are You Running"
print(text.lower())

# Print the sentence in reverse order.
text="Why Are You Running"
print(text.split()[::-1])

"""## **Session NO. 3**

### **String Methods**
"""

# UPPERCASE:	Converts the string to uppercase letters.
name="Fawad Ahmed Mir"
print(name.upper())

# LOWERCASE:	Converts the string to lowercase letters.
name="Zain Ali Zain"
print(name.lower())

# STRIP:  Remove all the before and after white spaces in the string.
name="      Raja Saad Jahandad         "
print(name.strip())

# RSTRIP:		Remove the trailing characters.
name ="Jaadu! Jaadu! Jaadu! Jaadu! YAyyyyyy!!!"
print(len(name))
print(name.rstrip("!"))

# REPLACE:	Replace the word.
name="Faizan Choudary"
print(name)
# name.replace("Faizan","Jawan")
print(name.replace("Faizan","Jawan"))

# SPLIT:		It splits the given string and returns the separated strings as list item.
name="Ina Mika Dika Raka Maka Daka"
print(name.split())

# CAPITALIZE:	Capitalize the first letter only.
name="fawad ahmed mir"
print(name.capitalize())

# ENDSWITH:	Checks the string end with the specified chaarcter or not. IF yes then return true else false.
text="The Dog Barks Bow! Bow! Bow!"
print(text.endswith("!"))

# FIND:  Returns the lowest index of a substring. Returns -1 if not found.
text="Why Are You Running"
print(text.find("You"))

# ISNUMERIC:Checks if all characters are numeric (or digits).
text="Am I A Number? 123"
print(text.isnumeric())
text="123"
print(text.isnumeric())

#TITLE: Convvert The String To Title Case
text="hi! how are you?"
print(text.title())

"""### **TASK NO.3**"""

text="Hello my name is fawad ahmed mir. Are you running away from progress?"
print(text.find("fawad"))
print(text.isnumeric())
print(text.isalpha())
print(text.islower())
print(text.isprintable())
print(text.isspace())
print(text.istitle())
print(text.title())
print(text.startswith("Hello"))
print(text.swapcase())

"""## **Session NO. 4**

### **Conditional Operators**
"""

Age=int(input("Enter Your Age : "))
print("Your Age is : ",Age)
print(Age==18)
print(Age>18)
print(Age<18)
print(Age>=18)
print(Age<=18)
print(Age!=18)

age=21

if(age>18):
  print("you are eligible to drive")
else:
  print("you are not eligible to drive")

N = int(input("Enter the value: "))
if(N<0):
    print("The Number is Negative")
elif(N==0):
    print("The Number is Zero")
elif(N!=0):
    print("The Number is not equal to Zero")
elif(N>0):
    print("The Number is greater than zero")
elif(N<=0):
    print("The Number is less or equal to zero")
else:
    print("The Number is greater or equal to zero")

num = int(input("Enter the Value: "))
if (num<0):
    print("The value is less than zero")
elif(num>0):
    print("The Number is Greater than zero")
    if(num<=10):
        print("The Number is less or equal to 10")
    elif(num>10 and num<=11):
        print("The Number is in between 10 and 11")
    elif(num>10 and num<=20):
        print("The number is in between 10 and 21")
    else:
        print("the number is greater than 20")
else:
    print("The Number is equal to zero")

"""### **Task no.4**"""

import time
# print(dir(time))
actual_time=time.strftime("%I:%M:%S %P")
current_time=time.localtime().tm_hour
if(current_time < 12 ):
  print("Good Morning!")
elif(current_time > 12 and current_time < 6):
  print("Good Afternoon!")
else:
  print("Good Evening!")

print(f"You Time Is : {actual_time}")

"""## **Session No. 5**

### **Match Case**
"""

x=int(input("Enter Value of X : "))

match x:
  case 0:
    print("Case is Zero")
  case 7:
    print("CR7 Suiiiiiiii")
  case _:
    print(x)

x=int(input("Enter Value Of X : "))
match x:
  case 0:
    print("Case Is Zero")
  case 7:
    print("Ronaldo Suiiiii")
  case _ if x!=9:
    print(f"{x} is not 9")
  case _ if x > 0:
    print(f"{x} is greater than 0")
  case _:
    print(f"{x}, is an alien")

x=int(input("Enter Number : "))

match x:
  case _ if(x%2==0):
    print(f"{x} is an even number")
  case _ if(x%2!=0):
    print(f"{x} is an odd number")
  case _:
    print(x)

"""### **Task No. 5**"""

x=int(input("Enter Number : "))
match x:
  case 1:
    print("Monday")
  case 2:
    print("Tuesday")
  case 3:
    print("Wednesday")
  case 4:
    print("Thursday")
  case 5:
    print("Friday")
  case 6:
    print("Saturday")
  case 7:
    print("Sunday")
  case _:
    print(f"{x} is an invalid day")

"""## **Session NO. 6**

### **Loop**

**For Loop**
"""

name="Rizwan"
for i in name:
  print(name , i)

colors = ["Red","Blue","Green","Yellow","Voilet"]
for i in colors:
  print(colors,i)

colors = ["Red","Blue","Green","Yellow","Voilet"]
for color in colors:
    print(color)
    for i in color:
        print()

colors = ["Red","Blue","Green","Yellow","Voilet"]
C= [c for color in colors for c in color]
print(C)

colors = ["Red","Blue","Green","Yellow","Voilet"]
_=[print(color) or [print(c) for c in color] for color in colors]

for j in range(5):
  print(j)

for k in range(0,5):
  print(k)

for l in range(-10,10):
  print(l)

for k in range(0,-10, -1):
	print(k)

for i in range(0,21,2):
  print(i, i+1)

"""**While Loop**"""

x=0
while(x < 5):
  print(x)
  x=x+1

while True:
  num=int(input("Number : "))
  print(num)
  if not num > 0:
    break

x=5
while (x>0):
  print(x)
  x=x-1
else:
  print("I am Inside Else Block")

"""### **Task NO. 6**"""

# TASK: range = 1 to 100.
# sum of even numbers.
sum = 0
for i in range(1,100,2):
  sum=sum+i
print(sum)

for i in range(1,100):
  if(i<11):
    print(f"5 X {i} = {5*i}")
    i=i+1
  if(i==10):
    break

for i in range(1,101):
  print(i,end=" ")
  if(i==50):
    break
  print("Mission Successful")
print("thank you")

for i in [2,3,5,7,8,5,4,3]:
  if i%2==0:
    continue
  print(i)

i=0
while True:
  print(i)
  i=i+1
  if(i%100 == 21):
    break

"""## **Session No. 7**

### **Functions**
"""

import math

"""**User Defined**"""

def greet(name):
  print("Hello Mellow", name)

greet("adnan rashid")

def add(a,b):
  return a+b

result=add(28,29)
print(result)

"""**Pre-Defined**"""

text="Hello World"
print(len(text))

lst=[1,2,3,4]
print(sum(lst))

num=-5
print(abs(num))

tupl=(3,1,4,15,9,0)
print(sorted(tupl))

my_list=['apple','banana','cherry','berry']
for index,value in enumerate(my_list):
  print(index,value)

"""**Default Arguments**"""

def complete_name(fname,mname="Ahmed",lname="Mir"):
  print(fname,mname,lname)

complete_name("Fawad")

def average(a=7,b=10):
  print(f"Average Of A And B : {(a+b)/2}")

average()
average(10,15)

"""**Keyword Argument**"""

def name(fname,mname,lname):
  print(f"{fname} {mname} {lname}")

name(mname="Ahmed",lname="Mir",fname="Fawad")

"""**REQUIRED ARGUMENTS**"""

def average(a,b):
  print(f"Average : {(a+b)/2}")
x=int(input("Value of X : "))
y=int(input("Value of Y : "))

average(x,y)

"""**ARBITARY ARGUMENTS**"""

def avg(*num):
    sum = 0
    for i in num:

     sum = sum+i
    print("Average is: ", sum/len(num))

avg(1,2,3,4,5,6,7,8,9,10)

"""**Task NO. 7**"""

def Grading(Eng,Urdu,Maths,Bio):
  sum=((Eng+Urdu+Maths+Bio)/400)*100
  print(f"Total Percentage {sum}")
  if(sum<=100 and sum >=90):
    print("A+ Grade")
  elif(sum<=89 and sum >=80):
    print("B+ Grade")
  elif(sum<=79 and sum >=70):
    print("C Grade")
  elif(sum<=69 and sum >=60):
    print("D Grade")
  elif(sum<=59 and sum >= 0):
    print("F Grade")
  else:
    print("Invalid Result")

English=int(input("English Out Of 100 : "))
Urdu=int(input("Urdu Out Of 100 : "))
Maths=int(input("Maths Out Of 100 : "))
Bio=int(input("Bio Out Of 100 : "))

Grading(English,Urdu,Maths,Bio)

"""**Decorators**"""

def my_decorator(func):
  def wrapper(name):
      print("Something is happening before the function is called.")
      func(name)
      print("Something is happening after the function is called.")
  return wrapper

@my_decorator
def say_hello(name):
  print("Hello!!!",name)

say_hello("fawad")

"""**Self Task**"""

#Question:
# Write a decorator called log_execution that logs the name of the function being
# called and the time it took to execute. Then, apply this decorator to a function
# slow_add(a, b) that sleeps for 2 seconds and returns the sum of a and b.

# Requirements:
# The decorator should print:
#The name of the function before execution.
# The time taken to execute the function after it finishes.

import time
def log_execution(func):
  def wrapper(a,b):
      print(f"Function Name : {func.__name__}")
      start_time=time.time()
      result=func(a,b)
      end_time=time.time()
      elapsed_time=end_time-start_time

      print(f"{func.__name__} took {elapsed_time} to execute")
      return result
  return wrapper

@log_execution
def slow_add(a,b):
  time.sleep(2)
  print(f"Sum Of A + B = {a+b}")

slow_add(5,6)

def decorator(func):
  def wrapper(*args,**kwargs):
    naam=kwargs.get('name')
    if naam is None and args:
            naam = args[0]

    print(f"Hello, very nice to meet you, {naam}!")
    result=func(*args,**kwargs)
    print(f"Thank You")
    return result
  return wrapper

@decorator
def letter(name):
  print("Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nMauris ornare sed tellus faucibus viverra. \nPellentesque sit amet risus sapien. \nAliquam erat volutpat. \nCurabitur elit enim, suscipit ac augue suscipit, interdum feugiat magna. \nProin at porttitor diam. ac turpis egestas.")

letter("Fawad")

"""## **Session NO. 8**

### **Lists**
"""

l = [3,5,7]
print(l)
print(type(l))
print(l[1])

l=[1,2,3,"MRK",True]
print(type(l))

colors = ['Red','Blue','Green']
print(colors[-1])
print(colors[-2])
print(colors[-3])

colors = ['Red','Green','Blue','Y']
for i in colors:
  if i == 'Y':
    print("Found", i)

animals=['Monkey','Donkey','Tiger','Lion','Bat']
print(animals[1:6:3])

"""### **List Comprehension**"""

#list = [Expression(item) for item in iterable if condition]
lst = [i*i for i in range(4)]
print(lst)

lst = [i for i in range(20) if i%2==0]
print(lst)

names= ['Choi Sab','Jutt Sab','Farhoot Sab','Mirsab']
lst=[name for name in names if 'o' in name]
print(lst)

names = ['zain','zaid','saad','fawad']
lst=[name for name in names if name.startswith('z')]
print(lst)

"""### **List Methods**"""

my_list = [3, 1, 2]
my_list.sort()
print(my_list)  # [1, 2, 3]

my_list.sort(reverse=True)
print(my_list)  # [3, 2, 1]

my_list = [1, 2, 3]
my_list.reverse()
print(my_list)  # [3, 2, 1]

my_list = [1, 2, 3]
new_list = my_list.copy()
print(new_list)  # [1, 2, 3]

my_list = [1, 2, 2, 3]
print(my_list.count(2))  # 2

my_list = [1, 2, 3]
my_list.clear()
print(my_list)  # []

my_list = [1, 2, 3]
item = my_list.pop()
print(item)     # 3
print(my_list)  # [1, 2]

my_list = [1, 2, 3, 2]
my_list.remove(2)
print(my_list)  # [1, 3, 2]

"""### **Tuples & Sets**"""

student_info=("Fawad",21,"A+")
print(student_info[0])
print(student_info[1:3])

maths_students={"Alice","Bob","Sam"}
science_students={"Tim","Bob","Mark"}
print(maths_students.union(science_students))

print(maths_students.intersection(science_students))

print((maths_students.difference(science_students)).union(science_students.difference(maths_students)))

maths_students.add("Frank")
print(maths_students)

tupal=(1,2,3,4,5)
sets=set(tupal)
print(sets)

if(len(tupal)==len(sets)):
  print(sets)
else:
  print("There are duplicates")

print(sum(sets))

"""## **Session NO. 9**

### **Dictionary**
"""

dct={"Name":"Fawad","Class":"BSCS","RollNo":"3rd"}
print(dct)

dct={"Model":"Rx-7,Rx-8,Rx-5","Car":"Mazda"}
dct.get("Model")

dct={"Model":"Rx-7,Rx-8,Rx-5","Car":"Mazda"}
dct.keys()

dct={"Model":"Rx-7,Rx-8,Rx-5","Car":"Mazda"}
dct.values()

dct={"Model":"Rx-7,Rx-8,Rx-5","Car":"Mazda"}
dct1=dct.copy()
print(dct1)

dct={"Model":"Rx-7,Rx-8,Rx-5","Car":"Mazda"}
dct.update({"Year":"1996"})
print(dct)



"""**TaskNo. 8**"""

dct1={"Name":"Fawad","Class":"BSCS","Rollno":"3rd"}
dct2={"Book":"Us","Bike":"Bayk"}
dct3=dct1 | dct2
print(dct3)

dct1={"Name":"Fawad","Class":"BSCS","Rollno":"3rd"}
dct2={"Book":"Us","Bike":"Bayk"}
dct3=dct1.copy()
print(dct3)
dct3.update(dct2)
print(dct3)

dct3={**dct1,**dct2}
print(dct3)

info={"name":"fawad","age":22,"address":"plate"}
info.update({"Employement Status":"Unemployed"})
print(info)

"""## **Session No. 10**

### **File Handling**
"""

f=open("demo.txt","w")
f.write("What Are You Doing!")
f.close()

f=open("demo.txt","r")
data=f.read()
print(data)

f=open("demo.txt","a")
f.write("\nThis Is The New Line")
f.close()
f=open("demo.txt","r")
data=f.read()
print(data)

f=open("demo.png","w")
f.write("This is a png file")
f.close()
f=open("demo.png","r")
data=f.read()
print(data)

with open("file.txt",'w') as f:
  f.write('This is the second syntax to write in a file')
with open("file.txt","r") as f:
  data=f.read()
  print(data)

import os
os.remove('demo.txt')

from pathlib import Path

for file in Path('.').rglob('demo.txt'):
    print(file)

"""### **Task No. 10**"""

with open('practice.txt', 'r+') as f:
    f.write('Hi every one. \nI am the Ai, Machine Learning and deep Learning Trainer.\nI use the Java Language for my Projects.\nI like programming in Java.')

    f.seek(0)  # Move pointer back to the beginning
    data = f.read()
    print(data)

    data = data.replace('Java', 'Python')

    f.seek(0)       # Move to beginning again before writing updated data
    f.write(data)   # This will overwrite from the start
    f.truncate()    # Remove any leftover content after new data
    print(data)

    if 'Projects' in data:
      print('\n Projects Found')

f=open('practice.txt','w')
f.write('Hi every one. \nI am the Ai, Machine Learning and deep Learning Trainer.\nI use the Java Language for my Projects.\nI like programming in Java.')
f.close()

f=open('practice.txt','r')
data=f.read()
print(data)
data=data.replace('Java','Python')

f=open('practice.txt','w')
f.write(data)

f=open('practice.txt','r')
data=f.read()
print(data)

if "Projects" in data:
  print("\nFound")

"""## **Session NO. 11**

### **Exception Handling**
"""

try:
  numerator=10
  denominator=0
  result=numerator/denominator
  print(result)
except:
  print("Error Error Error")

try:
  even=[2,4,6,8]
  print(even[5])
except ZeroDivisionError:
  print("Zero se divide na karein bhai")
except IndexError:
  print("Aap To Bahir Hi Nikal Gaye")

try:
  num=int(input("Enter A Number :"))
  assert num%2 == 0
except:
  print("Not an even Number")
else:
  reciprocal=1/num
  print(reciprocal)

try:
    numerator = 10
    denominator = 0
    result = numerator/denominator
    print(result)
except:
    print("Error: Denominator cannot be 0.")
finally:
    print("This is finally block.")

"""## **Session No. 12**

### **Classes And Objects**
"""

class Datalist:
  name = "Muhammad"
  age =25
  height=5.11

obj1 = Datalist()
print(obj1.name)
print(obj1.age)

class Datalist:
  name='Kaleem'
  occupation = 'Trainer'
  networth= 100

a=Datalist()
a.name = "Haleem"
a.occupation = "AI Trainer"
print(a.name,a.occupation)

"""### **Task NO . 11**"""

class Datalist:
  name = "Fawad"
  rollno = 4
  height = 5.11
  married = False

man=Datalist()
print(f"Name : {man.name}   {type(man.name)}")
print(f"RollNo : {man.rollno}   {type(man.rollno)}")
print(f"Height : {man.height}   {type(man.height)}")
print(f"Married : {man.married}   {type(man.married)}")

class Datalist:
  name = "Fawad"
  occupation = "Trainer"
  networth = 100

  def info(self):
    print(f"{self.name} is a {self.occupation}")

a= Datalist()
a.info()

"""### **Constructor**"""

class Car:
  def __init__(self,make,model,year):
    self.make=make
    self.model=model
    self.year=year
    self.odometer = 0

  def Car_info(self):
    car_info = f"{self.year} {self.make} {self.model}"
    return car_info

  def read_ODO(self):
    return f"This Car Has Run {self.odometer} miles"

  def update_odometer(self,mileage):
    if mileage >= self.odometer:
      self.odometer = mileage
    else:
      print("You Can't Roll Back An Odometer !")

  def increment_odo(self,miles):
    self.odometer += miles


car1 = Car('Toyota','Corolla',2019)
car2 = Car('Tesla','Model S',2020)

print(car1.Car_info())
print(car2.Car_info())

print(car1.read_ODO())
print(car2.read_ODO())

car1.increment_odo(50000)
print(car1.read_ODO())


car2.increment_odo(20000)
print(car2.read_ODO())

"""### **Task NO. 12**"""

class Calculator:
  def __init__(self,*num):
    self.num=num

  def addition(self,*num):
    print(f"Sum = {sum(num)}")

  def subtraction(self,*num):
    result = num[0]
    for i in num[1:]:
      result -= i
    print(f"Sub = {result}")

  def multiplication(self,*num):
    result = num[0]
    for i in num[1:]:
      result *= i
    print(f"Product = {result}")

  def division(self,*num):
    result = num[0]
    for i in num[1:]:
      result /= i
    print(f"Division = {result}")

a=Calculator()
a.addition(45,35)
a.subtraction(45,35)
a.multiplication(45,35)
a.division(45,35)

"""### **Abstraction**"""

class Car():
  def __init__(self):
    self.acc = False
    self.Break = False
    self.clutch = False
  def start (self):
    self.clutch = True
    self.acc = True
    print("Car Started .....")

car1=Car()
car1.start()

class Car:
    def start(self):
        self.__check_fuel()
        self.__check_engine()
        print("Car started!")

    def __check_fuel(self):
        print("Checking fuel level...")

    def __check_engine(self):
        print("Running engine diagnostics...")

my_car = Car()
my_car.start()

class Account:
    def __init__(self):
        self.__balance = 0
        self.__account = 123456789

    def debit(self, amount):
        self.__balance += amount
        print("----------------------------------------")
        print(f"{amount} Deposited")
        print("----------------------------------------")
        print(f"Available Balance: {self.__get_balance()}")
        print("----------------------------------------")

    def credit(self, amount):
        if amount <= self.__balance:
          self.__balance -= amount
          print(f"{amount} Withdrawn")
        else:
            print("Insufficient funds")

    def info(self):
        print("----------------------------------------")
        print(f"Balance: {self.__balance}")
        print(f"Account No: {self.__account}")
        print("----------------------------------------")

    def __get_balance(self):  # Private method
        return self.__balance

# Usage
acc = Account()
acc.debit(100000)
acc.credit(50000)
acc.info()

"""### **Task NO. 13**"""

class School:
  def __init__(self):
    self.__Name = ""
    self.__RollNo = 0
    self.__Age = 0

  def admit(self,name,age):
    self.__Name = name
    self.__Age = age
    self.__RollNo+=1
    print(f"{self.__Name} Admitted")

  def conduct_exam(self):
    print("paper being conducted")


std1=School()
std1.admit("Dum Dum",20)
std1.conduct_exam()

"""### **Inheritance**"""

class Super_Class:
  A=0
class Base_Class(Super_Class):
  B=0
  def info(self,a,b):
    A=a
    B=b
    print(f"{A}  {B}" )

a=Base_Class()
a.info(5,7)

class Employee:
    def __init__(self, name, age, degree):
        self.Name = name
        self.Age = age
        self.Degree = degree

    def info(self):
        print(f"Name : {self.Name}")
        print(f"Age : {self.Age}")
        print(f"Degree : {self.Degree}")

class Programmer(Employee):
    def __init__(self, name, age, degree, lang):
        super().__init__(name, age, degree)  # Call parent constructor
        self.Language = lang

    def info(self):
        super().info()  # Call Employee's info method
        print(f"Language : {self.Language}")

# Usage
emp = Programmer("Fawad", 21, "BSCS", "Python")
emp.info()

"""### **Task NO. 14**"""

class Shapes:
    def __init__(self):
        self.pi = 3.14

class Rectangle(Shapes):
    def __init__(self, l, w):
        super().__init__()            # Call parent constructor (optional here)
        self.__length = l
        self.__width = w

    def area(self):
        print(f"Area Of Rectangle Is : {self.__length * self.__width}")

class Circle(Shapes):
    def __init__(self, r):
        super().__init__()            # Call parent constructor to access pi
        self.__radius = r

    def area(self):
        print(f"Area Of Circle Is : {self.pi * self.__radius**2}")

# Create objects and call methods
rec = Rectangle(5, 7)
rec.area()

circle = Circle(5)
circle.area()

"""### **Polymorphism**"""

class Car:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Drive!")

class Boat:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Sail!")

car1 = Car("Ford", "Mustang")       #Create a Car class
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat class

for x in (car1, boat1):
  x.move()

class Animals:
  None
class Cat(Animals):
  def __init__(self):
    print("Cat Spawned")
  def sound(self):
    print("Meow Meow !")

class Dog(Animals):
  def __init__(self):
    print("Dog Spawned")
  def sound(self):
    print("Bow Bow !")

c=Cat()
d=Dog()
for i in (c,d):
  i.sound()

